version: 2
jobs:
  test_python:
    docker:
      - image: themattrix/tox
      - image: viime/opencpu-base
        command: |
          /bin/sh -c "chmod a+w /usr/local/lib/R/site-library && service cron start && /usr/lib/rstudio-server/bin/rserver && apachectl -DFOREGROUND"
    steps:
      - checkout
      - run:
          name: 'update viime package'
          command: |
            echo "repo=\"girder/viime\"&subdir=\"devops/viime\"&ref=\"${CIRCLE_SHA1}\"&dependencies=NA&upgrade=\"never\"" > input.txt
            curl http://localhost:8004/ocpu/library/devtools/R/install_github/ -d "@input.txt"
      - run: pip install -U 'tox>=3.7'
#       - run: tox -p auto -o

  test_web:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "web/yarn.lock" }}
      - run:
          working_directory: ./web
          name: Install node dependencies
          command: yarn
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "web/yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          working_directory: ./web
          command: yarn lint --no-fix
      - run:
          working_directory: ./web
          command: yarn lint:pug
      - run:
          working_directory: ./web
          command: yarn test:unit

  test_e2e:
    docker:
      - image: circleci/python:3.6-node-browsers
      - image: viime/opencpu-base
        command: |
          /bin/sh -c "chmod a+w /usr/local/lib/R/site-library && service cron start && /usr/lib/rstudio-server/bin/rserver && apachectl -DFOREGROUND"
    steps:
      - checkout
      # TODO: Fix E2E tests and re-enable
      # - run:
      #     name: Create a virtualenv for installation
      #     command: |
      #       python3 -m venv install_env
      #       . install_env/bin/activate
      # - run:
      #     name: Upgrade pip
      #     command: pip install -U pip
      # - run:
      #     name: Install python
      #     command: |
      #       pip install .
      #       pip install sentry-sdk[flask]
      #       pip install --upgrade sentry-sdk
      # - run:
      #     working_directory: ./viime
      #     name: Start the development server
      #     command: flask run
      #     background: true
      # - run:
      #     working_directory: ./web
      #     name: Install dependencies
      #     command: yarn
      # - run:
      #     working_directory: ./web
      #     name: Serve the website
      #     command: yarn serve
      #     background: true
      # - run:
      #     working_directory: ./e2e-test
      #     name: Install dependencies
      #     command: yarn install
      # - run:
      #     working_directory: ./e2e-test
      #     name: Run lint tests
      #     command: yarn run lint
      # - run:
      #     working_directory: ./e2e-test
      #     name: Run E2E tests
      #     command: yarn run test
      #     environment:
      #       CLIENT_URL: http://localhost:8080

  release:
    docker:
      - image: cimg/python:3.8-node
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "web/yarn.lock" }}
      - run:
          working_directory: ./web
          name: Install node dependencies
          command: yarn
      - run:
          working_directory: ./web
          name: Build web client
          command: |
            yarn build
            cp -R dist ../static/
      - run:
          name: Build python package
          command: |
            curl https://bootstrap.pypa.io/pip/2.7/get-pip.py | python
            pip install tox
            tox -e release
      - run:
          name: Copy to a standard location
          command: cp dist/viime* dist/viime-sdist.tar.gz
      - persist_to_workspace:
          root: .
          paths:
            - dist

  publish:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          working_directory: ./devops
          name: Build and push Docker image
          command: |
            docker build -t viime/opencpu:latest .
            echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push viime/opencpu:latest

  deploy:
    docker:
      - image: cimg/python:3.8
    environment:
      AWS_DEFAULT_OUTPUT: json
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/viime
      - run:
          name: Install jq
          command: (sudo apt-get update || true) && sudo apt-get install -y jq
      - run:
          name: Create a virtualenv for deployment
          command: |
            python3 -m venv deployment_env
            . deployment_env/bin/activate
      - run:
          name: Activate virtual environment
          command: echo ". $CIRCLE_WORKING_DIRECTORY/deployment_env/bin/activate" >> $BASH_ENV
      - run:
          name: Upgrade pip
          command: pip install -U pip
      - run:
          name: Install the AWS CLI
          command: pip install awscli
      - run:
          name: Install ansible
          command: pip  install ansible
      - run:
          name: Install ansible galaxy requirements
          command: ansible-galaxy install -r devops/ansible/requirements.yml
      - run:
          name: Install ssh key for the production instance
          command: |
            aws secretsmanager get-secret-value --secret-id "metabolomics.prod_ssh_key" | jq -r .SecretString > /tmp/metabolomics.pem
            chmod og-rwx /tmp/metabolomics.pem
            echo "eval $(ssh-agent) ssh-add /tmp/metabolomics.pem" >> $BASH_ENV
      - run:
          name: Run ansible
          command: ansible-playbook -e "flask_secret=$FLASK_SECRET" -e "sentry_dsn=$SENTRY_DSN" --inventory inventory site.yml
          working_directory: devops/ansible

workflows:
  version: 2
  test_and_publish:
    jobs:
      - test_python
      - test_web
      - test_e2e:
          requires:
            - test_python
            - test_web
      - release:
          requires:
            - test_e2e
          filters:
            branches:
              only: master
      - publish:
          requires:
            - test_e2e
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - publish
            - release
          filters:
            branches:
              only: master
